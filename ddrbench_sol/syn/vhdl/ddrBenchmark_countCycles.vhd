-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ddrBenchmark_countCycles is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    counterCmd1_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    counterCmd1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    counterCmd1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    counterCmd1_empty_n : IN STD_LOGIC;
    counterCmd1_read : OUT STD_LOGIC;
    m_axi_results_AWVALID : OUT STD_LOGIC;
    m_axi_results_AWREADY : IN STD_LOGIC;
    m_axi_results_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_results_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_results_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_results_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_results_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_results_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_results_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_results_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_results_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_results_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_results_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_results_WVALID : OUT STD_LOGIC;
    m_axi_results_WREADY : IN STD_LOGIC;
    m_axi_results_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_results_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_results_WLAST : OUT STD_LOGIC;
    m_axi_results_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_results_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_results_ARVALID : OUT STD_LOGIC;
    m_axi_results_ARREADY : IN STD_LOGIC;
    m_axi_results_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_results_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_results_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_results_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_results_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_results_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_results_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_results_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_results_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_results_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_results_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_results_RVALID : IN STD_LOGIC;
    m_axi_results_RREADY : OUT STD_LOGIC;
    m_axi_results_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_results_RLAST : IN STD_LOGIC;
    m_axi_results_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_results_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_results_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_results_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_results_BVALID : IN STD_LOGIC;
    m_axi_results_BREADY : OUT STD_LOGIC;
    m_axi_results_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_results_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_results_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    out_r_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    out_r_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    out_r_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    out_r_empty_n : IN STD_LOGIC;
    out_r_read : OUT STD_LOGIC );
end;


architecture behav of ddrBenchmark_countCycles is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal counterCmd1_blk_n : STD_LOGIC;
    signal results_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal results_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal results_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal out_r_blk_n : STD_LOGIC;
    signal tmp_reg_128 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_reg_133 : STD_LOGIC_VECTOR (60 downto 0);
    signal grp_countCycles_Pipeline_count_fu_90_ap_start : STD_LOGIC;
    signal grp_countCycles_Pipeline_count_fu_90_ap_done : STD_LOGIC;
    signal grp_countCycles_Pipeline_count_fu_90_ap_idle : STD_LOGIC;
    signal grp_countCycles_Pipeline_count_fu_90_ap_ready : STD_LOGIC;
    signal grp_countCycles_Pipeline_count_fu_90_counterCmd1_read : STD_LOGIC;
    signal grp_countCycles_Pipeline_count_fu_90_cnt_1_out : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_countCycles_Pipeline_count_fu_90_cnt_1_out_ap_vld : STD_LOGIC;
    signal grp_countCycles_Pipeline_count_fu_90_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm_state2 : STD_LOGIC;
    signal sext_ln13_fu_108_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component ddrBenchmark_countCycles_Pipeline_count IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        tmp : IN STD_LOGIC_VECTOR (63 downto 0);
        counterCmd1_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        counterCmd1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        counterCmd1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        counterCmd1_empty_n : IN STD_LOGIC;
        counterCmd1_read : OUT STD_LOGIC;
        cnt_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
        cnt_1_out_ap_vld : OUT STD_LOGIC );
    end component;



begin
    grp_countCycles_Pipeline_count_fu_90 : component ddrBenchmark_countCycles_Pipeline_count
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_countCycles_Pipeline_count_fu_90_ap_start,
        ap_done => grp_countCycles_Pipeline_count_fu_90_ap_done,
        ap_idle => grp_countCycles_Pipeline_count_fu_90_ap_idle,
        ap_ready => grp_countCycles_Pipeline_count_fu_90_ap_ready,
        tmp => tmp_reg_128,
        counterCmd1_dout => counterCmd1_dout,
        counterCmd1_num_data_valid => ap_const_lv2_0,
        counterCmd1_fifo_cap => ap_const_lv2_0,
        counterCmd1_empty_n => counterCmd1_empty_n,
        counterCmd1_read => grp_countCycles_Pipeline_count_fu_90_counterCmd1_read,
        cnt_1_out => grp_countCycles_Pipeline_count_fu_90_cnt_1_out,
        cnt_1_out_ap_vld => grp_countCycles_Pipeline_count_fu_90_cnt_1_out_ap_vld);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((m_axi_results_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_countCycles_Pipeline_count_fu_90_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_countCycles_Pipeline_count_fu_90_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_NS_fsm_state2))) then 
                    grp_countCycles_Pipeline_count_fu_90_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_countCycles_Pipeline_count_fu_90_ap_ready = ap_const_logic_1)) then 
                    grp_countCycles_Pipeline_count_fu_90_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                tmp_reg_128 <= counterCmd1_dout;
                trunc_ln_reg_133 <= out_r_dout(63 downto 3);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, counterCmd1_empty_n, m_axi_results_AWREADY, m_axi_results_WREADY, m_axi_results_BVALID, out_r_empty_n, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state9, grp_countCycles_Pipeline_count_fu_90_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((out_r_empty_n = ap_const_logic_0) or (counterCmd1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if ((not(((m_axi_results_AWREADY = ap_const_logic_0) or (grp_countCycles_Pipeline_count_fu_90_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((m_axi_results_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((m_axi_results_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_NS_fsm_state2 <= ap_NS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg, counterCmd1_empty_n, out_r_empty_n)
    begin
        if (((out_r_empty_n = ap_const_logic_0) or (counterCmd1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(m_axi_results_AWREADY, grp_countCycles_Pipeline_count_fu_90_ap_done)
    begin
        if (((m_axi_results_AWREADY = ap_const_logic_0) or (grp_countCycles_Pipeline_count_fu_90_ap_done = ap_const_logic_0))) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(m_axi_results_WREADY)
    begin
        if ((m_axi_results_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;

    ap_ST_fsm_state9_blk_assign_proc : process(m_axi_results_BVALID)
    begin
        if ((m_axi_results_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, counterCmd1_empty_n, out_r_empty_n)
    begin
                ap_block_state1 <= ((out_r_empty_n = ap_const_logic_0) or (counterCmd1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, m_axi_results_BVALID, ap_CS_fsm_state9)
    begin
        if (((m_axi_results_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axi_results_BVALID, ap_CS_fsm_state9)
    begin
        if (((m_axi_results_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    counterCmd1_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, counterCmd1_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            counterCmd1_blk_n <= counterCmd1_empty_n;
        else 
            counterCmd1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    counterCmd1_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, counterCmd1_empty_n, out_r_empty_n, ap_CS_fsm_state3, grp_countCycles_Pipeline_count_fu_90_counterCmd1_read)
    begin
        if ((not(((out_r_empty_n = ap_const_logic_0) or (counterCmd1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            counterCmd1_read <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            counterCmd1_read <= grp_countCycles_Pipeline_count_fu_90_counterCmd1_read;
        else 
            counterCmd1_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_countCycles_Pipeline_count_fu_90_ap_start <= grp_countCycles_Pipeline_count_fu_90_ap_start_reg;
    m_axi_results_ARADDR <= ap_const_lv64_0;
    m_axi_results_ARBURST <= ap_const_lv2_0;
    m_axi_results_ARCACHE <= ap_const_lv4_0;
    m_axi_results_ARID <= ap_const_lv1_0;
    m_axi_results_ARLEN <= ap_const_lv32_0;
    m_axi_results_ARLOCK <= ap_const_lv2_0;
    m_axi_results_ARPROT <= ap_const_lv3_0;
    m_axi_results_ARQOS <= ap_const_lv4_0;
    m_axi_results_ARREGION <= ap_const_lv4_0;
    m_axi_results_ARSIZE <= ap_const_lv3_0;
    m_axi_results_ARUSER <= ap_const_lv1_0;
    m_axi_results_ARVALID <= ap_const_logic_0;
    m_axi_results_AWADDR <= sext_ln13_fu_108_p1;
    m_axi_results_AWBURST <= ap_const_lv2_0;
    m_axi_results_AWCACHE <= ap_const_lv4_0;
    m_axi_results_AWID <= ap_const_lv1_0;
    m_axi_results_AWLEN <= ap_const_lv32_1;
    m_axi_results_AWLOCK <= ap_const_lv2_0;
    m_axi_results_AWPROT <= ap_const_lv3_0;
    m_axi_results_AWQOS <= ap_const_lv4_0;
    m_axi_results_AWREGION <= ap_const_lv4_0;
    m_axi_results_AWSIZE <= ap_const_lv3_0;
    m_axi_results_AWUSER <= ap_const_lv1_0;

    m_axi_results_AWVALID_assign_proc : process(m_axi_results_AWREADY, ap_CS_fsm_state3, grp_countCycles_Pipeline_count_fu_90_ap_done)
    begin
        if ((not(((m_axi_results_AWREADY = ap_const_logic_0) or (grp_countCycles_Pipeline_count_fu_90_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_results_AWVALID <= ap_const_logic_1;
        else 
            m_axi_results_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_results_BREADY_assign_proc : process(m_axi_results_BVALID, ap_CS_fsm_state9)
    begin
        if (((m_axi_results_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_results_BREADY <= ap_const_logic_1;
        else 
            m_axi_results_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_results_RREADY <= ap_const_logic_0;
    m_axi_results_WDATA <= grp_countCycles_Pipeline_count_fu_90_cnt_1_out;
    m_axi_results_WID <= ap_const_lv1_0;
    m_axi_results_WLAST <= ap_const_logic_0;
    m_axi_results_WSTRB <= ap_const_lv8_FF;
    m_axi_results_WUSER <= ap_const_lv1_0;

    m_axi_results_WVALID_assign_proc : process(m_axi_results_WREADY, ap_CS_fsm_state4)
    begin
        if (((m_axi_results_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            m_axi_results_WVALID <= ap_const_logic_1;
        else 
            m_axi_results_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    out_r_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, out_r_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_r_blk_n <= out_r_empty_n;
        else 
            out_r_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_r_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, counterCmd1_empty_n, out_r_empty_n)
    begin
        if ((not(((out_r_empty_n = ap_const_logic_0) or (counterCmd1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_r_read <= ap_const_logic_1;
        else 
            out_r_read <= ap_const_logic_0;
        end if; 
    end process;


    results_blk_n_AW_assign_proc : process(m_axi_results_AWREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            results_blk_n_AW <= m_axi_results_AWREADY;
        else 
            results_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    results_blk_n_B_assign_proc : process(m_axi_results_BVALID, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            results_blk_n_B <= m_axi_results_BVALID;
        else 
            results_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    results_blk_n_W_assign_proc : process(m_axi_results_WREADY, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            results_blk_n_W <= m_axi_results_WREADY;
        else 
            results_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

        sext_ln13_fu_108_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_reg_133),64));

end behav;
