// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ddrBenchmark_countCycles (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        counterCmd1_dout,
        counterCmd1_num_data_valid,
        counterCmd1_fifo_cap,
        counterCmd1_empty_n,
        counterCmd1_read,
        m_axi_results_AWVALID,
        m_axi_results_AWREADY,
        m_axi_results_AWADDR,
        m_axi_results_AWID,
        m_axi_results_AWLEN,
        m_axi_results_AWSIZE,
        m_axi_results_AWBURST,
        m_axi_results_AWLOCK,
        m_axi_results_AWCACHE,
        m_axi_results_AWPROT,
        m_axi_results_AWQOS,
        m_axi_results_AWREGION,
        m_axi_results_AWUSER,
        m_axi_results_WVALID,
        m_axi_results_WREADY,
        m_axi_results_WDATA,
        m_axi_results_WSTRB,
        m_axi_results_WLAST,
        m_axi_results_WID,
        m_axi_results_WUSER,
        m_axi_results_ARVALID,
        m_axi_results_ARREADY,
        m_axi_results_ARADDR,
        m_axi_results_ARID,
        m_axi_results_ARLEN,
        m_axi_results_ARSIZE,
        m_axi_results_ARBURST,
        m_axi_results_ARLOCK,
        m_axi_results_ARCACHE,
        m_axi_results_ARPROT,
        m_axi_results_ARQOS,
        m_axi_results_ARREGION,
        m_axi_results_ARUSER,
        m_axi_results_RVALID,
        m_axi_results_RREADY,
        m_axi_results_RDATA,
        m_axi_results_RLAST,
        m_axi_results_RID,
        m_axi_results_RFIFONUM,
        m_axi_results_RUSER,
        m_axi_results_RRESP,
        m_axi_results_BVALID,
        m_axi_results_BREADY,
        m_axi_results_BRESP,
        m_axi_results_BID,
        m_axi_results_BUSER,
        out_r_dout,
        out_r_num_data_valid,
        out_r_fifo_cap,
        out_r_empty_n,
        out_r_read
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [63:0] counterCmd1_dout;
input  [1:0] counterCmd1_num_data_valid;
input  [1:0] counterCmd1_fifo_cap;
input   counterCmd1_empty_n;
output   counterCmd1_read;
output   m_axi_results_AWVALID;
input   m_axi_results_AWREADY;
output  [63:0] m_axi_results_AWADDR;
output  [0:0] m_axi_results_AWID;
output  [31:0] m_axi_results_AWLEN;
output  [2:0] m_axi_results_AWSIZE;
output  [1:0] m_axi_results_AWBURST;
output  [1:0] m_axi_results_AWLOCK;
output  [3:0] m_axi_results_AWCACHE;
output  [2:0] m_axi_results_AWPROT;
output  [3:0] m_axi_results_AWQOS;
output  [3:0] m_axi_results_AWREGION;
output  [0:0] m_axi_results_AWUSER;
output   m_axi_results_WVALID;
input   m_axi_results_WREADY;
output  [63:0] m_axi_results_WDATA;
output  [7:0] m_axi_results_WSTRB;
output   m_axi_results_WLAST;
output  [0:0] m_axi_results_WID;
output  [0:0] m_axi_results_WUSER;
output   m_axi_results_ARVALID;
input   m_axi_results_ARREADY;
output  [63:0] m_axi_results_ARADDR;
output  [0:0] m_axi_results_ARID;
output  [31:0] m_axi_results_ARLEN;
output  [2:0] m_axi_results_ARSIZE;
output  [1:0] m_axi_results_ARBURST;
output  [1:0] m_axi_results_ARLOCK;
output  [3:0] m_axi_results_ARCACHE;
output  [2:0] m_axi_results_ARPROT;
output  [3:0] m_axi_results_ARQOS;
output  [3:0] m_axi_results_ARREGION;
output  [0:0] m_axi_results_ARUSER;
input   m_axi_results_RVALID;
output   m_axi_results_RREADY;
input  [63:0] m_axi_results_RDATA;
input   m_axi_results_RLAST;
input  [0:0] m_axi_results_RID;
input  [8:0] m_axi_results_RFIFONUM;
input  [0:0] m_axi_results_RUSER;
input  [1:0] m_axi_results_RRESP;
input   m_axi_results_BVALID;
output   m_axi_results_BREADY;
input  [1:0] m_axi_results_BRESP;
input  [0:0] m_axi_results_BID;
input  [0:0] m_axi_results_BUSER;
input  [63:0] out_r_dout;
input  [2:0] out_r_num_data_valid;
input  [2:0] out_r_fifo_cap;
input   out_r_empty_n;
output   out_r_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg counterCmd1_read;
reg m_axi_results_AWVALID;
reg m_axi_results_WVALID;
reg m_axi_results_BREADY;
reg out_r_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    counterCmd1_blk_n;
reg    results_blk_n_AW;
wire    ap_CS_fsm_state3;
reg    results_blk_n_W;
wire    ap_CS_fsm_state4;
reg    results_blk_n_B;
wire    ap_CS_fsm_state9;
reg    out_r_blk_n;
reg   [63:0] tmp_reg_128;
reg   [60:0] trunc_ln_reg_133;
wire    grp_countCycles_Pipeline_count_fu_90_ap_start;
wire    grp_countCycles_Pipeline_count_fu_90_ap_done;
wire    grp_countCycles_Pipeline_count_fu_90_ap_idle;
wire    grp_countCycles_Pipeline_count_fu_90_ap_ready;
wire    grp_countCycles_Pipeline_count_fu_90_counterCmd1_read;
wire   [63:0] grp_countCycles_Pipeline_count_fu_90_cnt_1_out;
wire    grp_countCycles_Pipeline_count_fu_90_cnt_1_out_ap_vld;
reg    grp_countCycles_Pipeline_count_fu_90_ap_start_reg;
reg   [8:0] ap_NS_fsm;
wire    ap_NS_fsm_state2;
wire  signed [63:0] sext_ln13_fu_108_p1;
reg    ap_block_state1;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
reg    ap_ST_fsm_state9_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 9'd1;
#0 grp_countCycles_Pipeline_count_fu_90_ap_start_reg = 1'b0;
end

ddrBenchmark_countCycles_Pipeline_count grp_countCycles_Pipeline_count_fu_90(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_countCycles_Pipeline_count_fu_90_ap_start),
    .ap_done(grp_countCycles_Pipeline_count_fu_90_ap_done),
    .ap_idle(grp_countCycles_Pipeline_count_fu_90_ap_idle),
    .ap_ready(grp_countCycles_Pipeline_count_fu_90_ap_ready),
    .tmp(tmp_reg_128),
    .counterCmd1_dout(counterCmd1_dout),
    .counterCmd1_num_data_valid(2'd0),
    .counterCmd1_fifo_cap(2'd0),
    .counterCmd1_empty_n(counterCmd1_empty_n),
    .counterCmd1_read(grp_countCycles_Pipeline_count_fu_90_counterCmd1_read),
    .cnt_1_out(grp_countCycles_Pipeline_count_fu_90_cnt_1_out),
    .cnt_1_out_ap_vld(grp_countCycles_Pipeline_count_fu_90_cnt_1_out_ap_vld)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((m_axi_results_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_countCycles_Pipeline_count_fu_90_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_NS_fsm_state2))) begin
            grp_countCycles_Pipeline_count_fu_90_ap_start_reg <= 1'b1;
        end else if ((grp_countCycles_Pipeline_count_fu_90_ap_ready == 1'b1)) begin
            grp_countCycles_Pipeline_count_fu_90_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        tmp_reg_128 <= counterCmd1_dout;
        trunc_ln_reg_133 <= {{out_r_dout[63:3]}};
    end
end

always @ (*) begin
    if (((out_r_empty_n == 1'b0) | (counterCmd1_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((m_axi_results_AWREADY == 1'b0) | (grp_countCycles_Pipeline_count_fu_90_ap_done == 1'b0))) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_results_WREADY == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

always @ (*) begin
    if ((m_axi_results_BVALID == 1'b0)) begin
        ap_ST_fsm_state9_blk = 1'b1;
    end else begin
        ap_ST_fsm_state9_blk = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_results_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_results_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        counterCmd1_blk_n = counterCmd1_empty_n;
    end else begin
        counterCmd1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((out_r_empty_n == 1'b0) | (counterCmd1_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        counterCmd1_read = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        counterCmd1_read = grp_countCycles_Pipeline_count_fu_90_counterCmd1_read;
    end else begin
        counterCmd1_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_results_AWREADY == 1'b0) | (grp_countCycles_Pipeline_count_fu_90_ap_done == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_results_AWVALID = 1'b1;
    end else begin
        m_axi_results_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_results_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        m_axi_results_BREADY = 1'b1;
    end else begin
        m_axi_results_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_results_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_results_WVALID = 1'b1;
    end else begin
        m_axi_results_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_r_blk_n = out_r_empty_n;
    end else begin
        out_r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((out_r_empty_n == 1'b0) | (counterCmd1_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_r_read = 1'b1;
    end else begin
        out_r_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        results_blk_n_AW = m_axi_results_AWREADY;
    end else begin
        results_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        results_blk_n_B = m_axi_results_BVALID;
    end else begin
        results_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        results_blk_n_W = m_axi_results_WREADY;
    end else begin
        results_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((out_r_empty_n == 1'b0) | (counterCmd1_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if ((~((m_axi_results_AWREADY == 1'b0) | (grp_countCycles_Pipeline_count_fu_90_ap_done == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((m_axi_results_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((m_axi_results_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_NS_fsm_state2 = ap_NS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((out_r_empty_n == 1'b0) | (counterCmd1_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign grp_countCycles_Pipeline_count_fu_90_ap_start = grp_countCycles_Pipeline_count_fu_90_ap_start_reg;

assign m_axi_results_ARADDR = 64'd0;

assign m_axi_results_ARBURST = 2'd0;

assign m_axi_results_ARCACHE = 4'd0;

assign m_axi_results_ARID = 1'd0;

assign m_axi_results_ARLEN = 32'd0;

assign m_axi_results_ARLOCK = 2'd0;

assign m_axi_results_ARPROT = 3'd0;

assign m_axi_results_ARQOS = 4'd0;

assign m_axi_results_ARREGION = 4'd0;

assign m_axi_results_ARSIZE = 3'd0;

assign m_axi_results_ARUSER = 1'd0;

assign m_axi_results_ARVALID = 1'b0;

assign m_axi_results_AWADDR = sext_ln13_fu_108_p1;

assign m_axi_results_AWBURST = 2'd0;

assign m_axi_results_AWCACHE = 4'd0;

assign m_axi_results_AWID = 1'd0;

assign m_axi_results_AWLEN = 32'd1;

assign m_axi_results_AWLOCK = 2'd0;

assign m_axi_results_AWPROT = 3'd0;

assign m_axi_results_AWQOS = 4'd0;

assign m_axi_results_AWREGION = 4'd0;

assign m_axi_results_AWSIZE = 3'd0;

assign m_axi_results_AWUSER = 1'd0;

assign m_axi_results_RREADY = 1'b0;

assign m_axi_results_WDATA = grp_countCycles_Pipeline_count_fu_90_cnt_1_out;

assign m_axi_results_WID = 1'd0;

assign m_axi_results_WLAST = 1'b0;

assign m_axi_results_WSTRB = 8'd255;

assign m_axi_results_WUSER = 1'd0;

assign sext_ln13_fu_108_p1 = $signed(trunc_ln_reg_133);

endmodule //ddrBenchmark_countCycles
